<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <title>Checklist Diário - Assistente de Contas a Receber  </title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 30px;
      background-color: #f8f9fa;
      color: #333;
      transition: all 0.3s ease-in-out;
    }
    h1 {
      text-align: center;
      color: #007bff;
      font-size: 2.5em;
      margin-bottom: 20px;
      animation: fadeIn 1s ease-out;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      animation: slideIn 1s ease-out;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 12px;
      text-align: left;
      font-size: 14px;
      transition: all 0.3s ease-in-out;
    }
    th {
      background-color: #e9ecef;
      color: #007bff;
    }
    td:hover {
      background-color: #f1f1f1;
      cursor: pointer;
    }
    .form-container {
      margin-bottom: 20px;
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      animation: fadeInUp 1s ease-out;
    }
    .form-container label {
      font-size: 14px;
      margin-right: 10px;
      color: #333;
      width: 100%;
    }
    .form-container input, .form-container select {
      padding: 8px;
      margin-right: 15px;
      font-size: 14px;
      border-radius: 4px;
      border: 1px solid #ccc;
      transition: border-color 0.3s ease-in-out;
      margin-bottom: 10px;
      width: 48%;
    }
    .form-container input:focus, .form-container select:focus {
      border-color: #007bff;
    }
    .form-container button {
      padding: 12px 25px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 20px;
      transition: all 0.3s ease-in-out;
    }
    .form-container button:hover {
      background-color: #0056b3;
      transform: scale(1.05);
    }
    @keyframes fadeIn {
      0% { opacity: 0; transform: translateY(-20px); }
      100% { opacity: 1; transform: translateY(0); }
    }
    @keyframes slideIn {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(0); }
    }
    @keyframes fadeInUp {
      0% { opacity: 0; transform: translateY(30px); }
      100% { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>
<body>
<div style="display: flex; align-items: center; gap: 20px;">
  <img src="https://i.imgur.com/L55qh7b.png" alt="Logo" style="width: 60px; height: auto;">
  <img src="https://i.imgur.com/WzaQvTL.png" alt="Logo" style="width: 45px; height: auto;">
  <h1 style="font-size: 32px; margin: 0;">Checklist de Rotina - Assistente de Contas a Receber TBA/TPA </h1>
</div>
<h5>FIN-CKL-002-TPA Rev:02</h5>
<!-- Formulário de informações iniciais -->
<div class="form-container" style="display: flex; gap: 20px; align-items: center; flex-wrap: wrap;">
  <div style="flex: 2;">
    <label for="nome">Nome:</label>
    <input type="text" id="nome" name="nome" placeholder="Digite seu nome" required style="width: 100%;">
  </div>

  <div style="flex: 1;">
    <label for="data">Data:</label>
    <input type="date" id="data" name="data" required style="width: 100%;">
  </div>

  <div style="flex: 1;">
    <label for="unidade">Unidade:</label>
    <select id="unidade" name="unidade" required style="width: 100%;">
      <option value="">Selecione</option>
      <option value="TCA">TCA</option>
      <option value="TCV">TCV</option>
      <option value="ABC">ABC</option>
      <option value="MCD">MCD</option>
      <option value="TBL">TBL</option>
      <option value="TPA">TPA</option>
      <option value="TBA">TBA</option>
      <option value="TSJ">TSJ</option>
      <option value="API">API</option>
      <option value="TPH">TPH</option>
      <option value="TCG">TCG</option>
    </select>
  </div>
</div>


<form id="checklistForm">
  <table>
    <thead>
      <tr>
        <th>Horário/Evento</th>
        <th>Atividade</th>
        <th>Documento de Referência</th>
        <th>Ferramenta/Maquinario</th>
        <th>Plano de Reação</th>
        <th>Sim</th>
        <th>Não</th>
      </tr>
    </thead>
    <tbody>
      <script>
        const atividades = [
          ["Diario","Fazer a Baixa do Banco (Atualização dos pagamentos que os clientes fizeram)","FIN-POP-004-TPA/TBA","Aplicativo do Banco /SICF","Acionar o Coordenador Administrativo"],
          ["Diario","Gerar Planilha de informações de Clientes Inadimplentes TPA/TBA","FIN-POP-004-TPA/TBA","Planilha Execel/SICF","Acionar o Coordenador Administrativo"],
          ["Diario","Analisar Planilha para definir os Clientes Inadimplesntes que serão contactados (Clientes com até 5 dias de atraso)","FIN-POP-004-TPA/TBA","Planilha Excel","Acionar o Coordenador Administrativo" ],
          ["Diario","Iniciar o processo de cobrança dos clientes Inadimplentes, via Email, fone ou Whatsap","FIN-POP-004-TPA/TBA","Email/fone /Whasap","Acionar o Coordenador Administrativo"],
          ["Diario","Contactar o Cliente para verificar a forma que o mesmo deseja efetuar o pagamento","FIN-POP-004-TPA/TBA","Email/fone /Whasap","Acionar o Coordenador Administrativo"],
          ["Diario","Negociar com Clientes prazos de pagamentos (Novos e Antigos clientes)","FIN-POP-004-TPA/TBA","Fone /Whatsap","Acionar o Coordenador Administrativo"],
          ["Diario","Enviar o Boleto ou chave PIX para clientes com valores e formas de pagamentos atualizados ","FIN-POP-004-TPA/TBA","Email /Whatsap","Acionar o Coordenador Administrativo"],
          ["Diario","Fazer Lancamento das novas Negociações na planilha de Cobrança por unidade","FIN-POP-005-TPA/TBA","Planilha Excel","Acionar o Coordenador Administrativo"],
          ["Diario","Fazer o Controle do Processo atraves da Planilha de Cobrança","FIN-POP-005-TPA/TBA","Planilha Excel","Acionar o Coordenador Administrativo"],
          ["Diario","Analisar o CAR Contas a Receber atualizado da unidade","FIN-POP-005-TPA/TBA","SICF","Acionar o Coordenador Administrativo"],
          ["Diario","Enviar diariamente por email  planilha atualizada para a Diretoria da Centralizadora  (Jose Carlos)","FIN-POP-005-TPA/TBA","Planilha Excel","Acionar o Coordenador Administrativo"],
          ["Diario","Dar Suporte aos vendedores por fone (analise de credito,cadastro de clientes e endereço etc)","FIN-POP-005-TPA/TBA","Fone/Whatsap/SERASA","Acionar o Coordenador Administrativo"],
          ["Diario","Responder a Solicitação dos vendedores via email (ajuste de roteiro , solicitação de prazo)","FIN-POP-005-TPA/TBA","Email","Acionar o Coordenador Administrativo"],
          ["Diario","Dar feedback em relação a solicitação aos Supervisores lideres (formalizado por email)","FIN-POP-005-TPA/TBA","Email","Acionar o Coordenador Administrativo"],
          ["Diario","Coletar as alterações de prazos enviados pelos vendedores via Whatsap (até 17:35h)","FIN-POP-005-TPA/TBA","Whatsap /Planilha Excel","Acionar o Coordenador Administrativo"],
          ["Diario","Enviar email diario aos Supervisores com a lista de clientes Inadimplentes","FIN-POP-005-TPA/TBA","Email","Acionaro Coordenador Administrativo"],
          ["Diario","Gerar 1 arquivo para a equipe de vendas com os clientes inadimplentes por equipe , enviados para Gerente da Unidade , Gerente Administrativa , Supervisores Lideres e demais Supervisores","FIN-POP-005-TPA/TBA","Email","Acionar o Coordenador Administrativo"],
          ["Diario","Analisar Critica (relatorios de vendas diarios) dos pedidios ","FIN-POP-006-TPA/TBA","SICF /Arquivo TXT","Acionar o Coordenador Administrativo"],
          ["Diario","Fazer as alteração de prazo no sistema SICF","FIN-POP-006-TPA/TBA","SICF","Acionar o Coordenador Administrativo"],
          ["Diario","Realizar o cadastro de Clientes novos no SICF","FIN-POP-007-TPA/TBA","SICF /Paginas da receita Federal /SEFAZ e Simples Nacional","Acionar o Coordenador Administrativo"],
          ["Diario","Analisar novas Criticas Atualizado no fim da tarde","FIN-POP-006-TPA/TBA","SICF/Arquivo TXT e SERASA","Acionar o Coordenador Administrativo"],
          ["Diario","Liberar os pedidos para faturamento","FIN-POP-006-TPA/TBA","SICF","Acionar o Coordenador Administrativo"],
          ["Diario","Fazer a Reprogramação de Pedidos","FIN-POP-006-TPA/TBA","SICF","Acionar o Coordenador Administrativo"],
          ];

        for (let i = 0; i < atividades.length; i++) {
          document.write(`
            <tr>
              <td>${atividades[i][0]}</td>
              <td>${atividades[i][1]}</td>
              <td>${atividades[i][2]}</td>
              <td>${atividades[i][3]}</td>
              <td>${atividades[i][4]}</td>
              <td>
                <input type="checkbox" name="atividade_${i+1}" value="Sim"
                  onclick="toggleCheckbox(event, this, 'atividade_${i+1}', 'Sim')">
              </td>
              <td>
                <input type="checkbox" name="atividade_${i+1}" value="Não"
                  onclick="toggleCheckbox(event, this, 'atividade_${i+1}', 'Não')">
              </td>
              <input type="hidden" name="hora_atividade_${i+1}">
              <input type="hidden" name="resposta_atividade_${i+1}">
            </tr>
          `);
        }
      </script>
    </tbody>
  </table>

  <div class="form-container">
    <button type="submit" id="submitBtn">Enviar</button>
  </div>
</form>

<script>
  let formularioEnviado = false;

  window.addEventListener("beforeunload", function (e) {
    if (!formularioEnviado) {
      e.preventDefault();
      e.returnValue = "Você tem certeza que deseja sair? As informações preenchidas serão perdidas.";
    }
  });

  function toggleCheckbox(event, checkbox, nomeAtividade, valorSelecionado) {
    const checkboxes = document.getElementsByName(nomeAtividade);
    checkboxes.forEach(c => {
      if (c !== checkbox) c.checked = false;
    });
    const horaCampo = document.querySelector(`[name=hora_${nomeAtividade}]`);
    const respostaCampo = document.querySelector(`[name=resposta_${nomeAtividade}]`);
    horaCampo.value = new Date().toLocaleString('pt-BR');
    respostaCampo.value = valorSelecionado;
  }

  document.getElementById("checklistForm").addEventListener("submit", function(e) {
    e.preventDefault();
    const nome = document.getElementById("nome").value;
    const data = document.getElementById("data").value;
    const unidade = document.getElementById("unidade").value;

    if (!nome || !data || !unidade) {
      alert("Preencha todos os campos obrigatórios.");
      return;
    }

    let algumaMarcada = false;
    for (let i = 1; i <= atividades.length; i++) {
      const resposta = document.querySelector(`[name=resposta_atividade_${i}]`).value;
      if (resposta === "Sim" || resposta === "Não") {
        algumaMarcada = true;
        break;
      }
    }

    if (!algumaMarcada) {
      alert("Marque pelo menos uma atividade.");
      return;
    }

    if (!confirm("Tem certeza que deseja enviar?")) return;

    const submitBtn = document.getElementById("submitBtn");
    submitBtn.disabled = true;
    submitBtn.textContent = "Enviando...";

    const formData = new FormData(document.getElementById("checklistForm"));
    formData.append("nome", nome);
    formData.append("data", data);
    formData.append("unidade", unidade);

    fetch("https://script.google.com/macros/s/AKfycbw4QuYHSEctKYkNcavWx9TY0-RoH7stXz1apNjJXe2Ju4ZxTnsUZpbkX246dtUoXJi9/exec", {
      method: "POST",
      body: formData
    })
    .then(response => response.text())
    .then(data => {
      formularioEnviado = true;
      alert("Dados enviados com sucesso!");
      location.reload();
    })
    .catch(error => {
      alert("Erro ao enviar os dados: " + error);
      submitBtn.disabled = false;
      submitBtn.textContent = "Enviar";
    });
  });
  
</script>
<!-- Botão de ajuda discreto no final da página -->
<div style="text-align: center; margin-top: 60px; margin-bottom: 20px;">
  <a href="mailto:luis.correia@triunfante.com.br,marcelo.portella@triunfante.com.br,raphael.bortot@triunfante.com.br,daniela.nachbar@triunfante.com.br?subject=Ajuda%20-%20Checklist%20Coord%20Adm"
     style="
      display: inline-flex;
      align-items: center;
      gap: 8px;
      background-color: #f1f1f1;
      color: #333;
      padding: 10px 18px;
      border-radius: 6px;
      font-size: 15px;
      text-decoration: none;
      border: 1px solid #ccc;
      transition: all 0.3s ease;
    "
    onmouseover="this.style.backgroundColor='#e2e2e2'"
    onmouseout="this.style.backgroundColor='#f1f1f1'">
    💬 Fale com o suporte
  </a>
</div>

<script>
  window.onload = function () {
    const dataInput = document.getElementById("data");
    // Obtém a data e hora local do dispositivo (Campinas, SP, Brasil)
    const agora = new Date(); 
    
    const ano = agora.getFullYear();
    // Mês é de 0 a 11, por isso somamos 1 e usamos padStart para ter sempre dois dígitos
    const mes = String(agora.getMonth() + 1).padStart(2, '0'); 
    // Dia do mês, com padStart para ter sempre dois dígitos
    const dia = String(agora.getDate()).padStart(2, '0');

    // Formata a data como 'YYYY-MM-DD'
    const hojeFormatado = `${ano}-${mes}-${dia}`;
    
    // Define o valor do campo data para o dia atual
    dataInput.value = hojeFormatado; 
    // Restringe a data mínima ao dia atual, impedindo seleção de datas passadas
    dataInput.min = hojeFormatado;   
    // Restringe a data máxima ao dia atual, impedindo seleção de datas futuras
    dataInput.max = hojeFormatado;   
    // Impede que o usuário digite manualmente no campo
    dataInput.readOnly = true;       
    // Impede o clique para abrir o calendário de seleção de data
    dataInput.style.pointerEvents = 'none'; 
    // Opcional: Adiciona um estilo visual para indicar que o campo está desabilitado
    dataInput.style.backgroundColor = '#e9ecef'; 
  };
</script>

</body>
</html>
